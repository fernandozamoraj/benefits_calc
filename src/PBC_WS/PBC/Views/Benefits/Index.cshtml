@model PBC.Models.Family

@{
    ViewBag.Title = "Web Api for Benefits Calculator";
}

<style type="text/css">
    .invalid {
        border: solid;
        border-width: 2;
        border-color: #ff0000;
    }
</style>

<h2>Benefits Calculator Web Services</h2>

<div id="calc-app">
    <div class="row">
        <p>
            This is the stand alone page for the Web Services Controller.
            There are two webservices with one POST request on each.  
            The method is outlined below.
            The react-application in this same Git repository has implements calling
            the POST method in the file src/components/benefits_app.js.
        </p>

        <h3>The BenefitsApiController</h3>
        <pre>
    using System;
    using System.Diagnostics;
    using System.Web.Http;
    using System.Net;
    using System.Net.Http;
    using PBC.Models;
    using PBC.App.Models;
    using PBC.App.Services;
    using PBC.Services;
    namespace PBC.App.Controllers
    {
        public class BenefitsApiController : ApiController
        {
            IAppConfiguration _appConfig;
            ICalculator _calculator;
            IModelMapper _modelMapper;
            IFamilyValidator _familyValidator;

            public BenefitsApiController(IAppConfiguration appConfig, ICalculator calculator, IModelMapper modelMapper, IFamilyValidator familyValidator)
            {
                _calculator = calculator;
                _appConfig = appConfig;
                _modelMapper = modelMapper;
                _familyValidator = familyValidator;
            }

            public HttpResponseMessage Post([FromBody]Family model)
            {
                try
                {
                    var validationResults = _familyValidator.Run(model);
                    if (validationResults.IsValid)
                    {
                        CalculationResults results = _calculator.RunCalculations(model, _appConfig);
                        CalculatedResultsModel resultsModel = _modelMapper.MapToResults(results);
                        return Request.CreateResponse(HttpStatusCode.OK, resultsModel);
                    }
                    HttpError err = new HttpError("Invalid input parameter. " + validationResults.Message);
                    return Request.CreateErrorResponse(HttpStatusCode.NotAcceptable, err);
                }
                catch(Exception e)
                {
                    Debug.WriteLine(e.Message);
                    //TODO: log the exception
                    HttpError err = new HttpError("Exception occurred check server logs");
                    return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, err);
                }
            }
        }
    }
        </pre>
        <h3>Calling the service using a POST request</h3>
        <p>Several client side services exist for calling the service.  Calling with your choice of AJAX library will be very similar.</p>
        <p>Here is an example with axios</p>
        <p>At least one of the members must be an employee</p>

        <pre>

            import axios from 'axios';

            let members = [ 
                  {
                      FirstName: 'Bart',
                      LastName: 'Simpson',
                      DateOfBirth: new Date(1995, 1, 1, 12, 0, 0),
                      IsEmployee: true,
                      IsSpouse: false,
                  }
            ];

            axios.post('api/benefitsApi/', {
                Members: members
            })
            .then((data) => {
                console.log(data.data[0]);
            })
            .catch((err) => {
                console.log(err);
            })
        </pre>
        <h3>The FamilyMemberController</h3>
        <pre>
        using System;
        using System.Diagnostics;
        using System.Web.Http;
        using System.Net;
        using System.Net.Http;
        using PBC.Models;
        using PBC.Repos;
        using PBC.App.Services;
        using PBC.Services;
        namespace PBC.App.Controllers
        {
            public class FamilyMemberController : ApiController
            {
                IAppConfiguration _appConfig;
                ICalculator _calculator;
                IModelMapper _modelMapper;
                IPersonValidator _personValidator;
                IFamilyRepository _familyRepository;


                public FamilyMemberController(IAppConfiguration appConfig, ICalculator calculator, 
                    IModelMapper modelMapper, IPersonValidator personValidator, IFamilyRepository familyRepository)
                {
                    _calculator = calculator;
                    _appConfig = appConfig;
                    _modelMapper = modelMapper;
                    _personValidator = personValidator;
                    _familyRepository = familyRepository;
                }

                public HttpResponseMessage Post([FromBody]Person model)
                {
                    try
                    {
                        var validationResults = _personValidator.Run(model);
                        if (validationResults.IsValid)
                        {
                            Person p = _familyRepository.Save(model);
                            return Request.CreateResponse(HttpStatusCode.OK, p);
                        }
                        HttpError err = new HttpError("Invalid input parameter. " + validationResults.Message);
                        return Request.CreateErrorResponse(HttpStatusCode.NotAcceptable, err);
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine(e.Message);
                        //TODO: log the exception
                        HttpError err = new HttpError("Exception occurred check server logs");
                        return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, err);
                    }
                }
            }
        }

        </pre>
        <h3>Running the Calculator</h3>
        
        <ol>
            <li>Open the command line</li>
            <li>Navigate to <span style="color:blue; font-weight: bold;">\benefits_calc\src\pbc-client</span> </li>
            <li>run the command <span style="color:blue; font-weight: bold;">*npm update</span> to update the dependencies</li>
            <li>The application should open in your browser</li>
        </ol>
        <p>*If you don't have nodejs, you can download it at <a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>

        <p>That is all there is to it. The calculator application is self explanatory. You simply add members and the run the calucation process.</p>
            
    </div>
</div>


<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.4/vue.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue-resource/0.1.16/vue-resource.min.js"></script>
<script src="~/Scripts/app/components/addmember.component.js"></script>
<script src="~/Scripts/app/components/calculated-results.component.js"></script>
<script src="~/Scripts/calculations-app.js"></script>


